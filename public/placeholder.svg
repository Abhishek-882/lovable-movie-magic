// src/components/ImageWithFallback.tsx
import { useState } from "react";

interface ImageWithFallbackProps extends React.ImgHTMLAttributes<HTMLImageElement> {
  fallback?: React.ReactNode;
  movieTitle?: string;
}

export const ImageWithFallback = ({
  src,
  alt = "",
  fallback,
  movieTitle,
  className = "",
  ...props
}: ImageWithFallbackProps) => {
  const [error, setError] = useState(false);

  if (error || !src) {
    return fallback ? (
      <>{fallback}</>
    ) : (
      <div className={`${className} relative flex items-center justify-center bg-gray-200`}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 800 450"
          className="h-full w-full"
        >
          <defs>
            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#ef4444" />
              <stop offset="100%" stopColor="#f59e0b" />
            </linearGradient>
          </defs>
          <rect width="100%" height="100%" fill="url(#gradient)" opacity="0.2" />
          <rect x="300" y="150" width="200" height="150" fill="#fff" rx="5" />
          <rect x="310" y="160" width="180" height="30" fill="#ef4444" />
          <text 
            x="400" 
            y="250" 
            fontFamily="Arial" 
            fontSize="24" 
            fontWeight="bold" 
            textAnchor="middle" 
            fill="#fff" 
            opacity="0.8"
          >
            {movieTitle || 'Movie Backdrop'}
          </text>
        </svg>
      </div>
    );
  }

  return (
    <img
      src={src}
      alt={alt}
      className={className}
      onError={() => setError(true)}
      loading="lazy"
      {...props}
    />
  );
};
