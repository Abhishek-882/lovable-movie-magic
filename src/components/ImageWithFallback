// src/components/ImageWithFallback.tsx
import { useState, useEffect } from "react";

interface ImageWithFallbackProps extends React.ImgHTMLAttributes<HTMLImageElement> {
  fallbackElement?: React.ReactNode;
  movieTitle?: string;
}

export const ImageWithFallback = ({
  src,
  alt,
  className = "",
  fallbackElement,
  movieTitle,
  ...props
}: ImageWithFallbackProps) => {
  const [hasError, setHasError] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!src) {
      setHasError(true);
      return;
    }

    const img = new Image();
    img.src = src;
    img.onload = () => setIsLoading(false);
    img.onerror = () => setHasError(true);
  }, [src]);

  if (hasError || !src) {
    return fallbackElement ? (
      <>{fallbackElement}</>
    ) : (
      <div className={`${className} flex items-center justify-center bg-gradient-to-br from-red-500/10 to-yellow-500/10`}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 800 450"
          className="h-full w-full"
        >
          <rect width="100%" height="100%" fill="url(#gradient)" opacity="0.2" />
          <defs>
            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#ef4444" />
              <stop offset="100%" stopColor="#f59e0b" />
            </linearGradient>
          </defs>
          <rect x="300" y="150" width="200" height="150" fill="#fff" rx="5" />
          <rect x="310" y="160" width="180" height="30" fill="#ef4444" />
          <text
            x="50%"
            y="50%"
            fontFamily="Arial"
            fontSize="24"
            fontWeight="bold"
            textAnchor="middle"
            fill="#fff"
            opacity="0.8"
          >
            {movieTitle || 'Movie Backdrop'}
          </text>
        </svg>
      </div>
    );
  }

  return (
    <>
      {isLoading && (
        <div className={`${className} flex items-center justify-center bg-gray-200`}>
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-gray-300 border-t-primary" />
        </div>
      )}
      <img
        src={src}
        alt={alt}
        className={`${className} ${isLoading ? 'hidden' : 'block'}`}
        onError={() => setHasError(true)}
        loading="lazy"
        {...props}
      />
    </>
  );
};
